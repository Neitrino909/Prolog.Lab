read_str_f(A,N,Flag):-get0(X),r_str_f(X,A,[],N,0,Flag).
r_str_f(-1,A,A,N,N,1):-!.
r_str_f(10,A,A,N,N,0):-!.
r_str_f(X,A,B,N,K,Flag):-K1 is K+1,append(B,[X],B1),get0(X1),r_str_f(X1,A,B1,N,K1,Flag).

write_str([]):-!.
write_str([H|Tail]):-put(H),write_str(Tail).


sum_digit(N, N):- N < 10, !.
sum_digit(N, X):- N1 is N mod 10, N2 is N div 10, sum_digit(N2, X1), X is N1 + X1.

prod_digit(N,N) :- N < 10, !.
prod_digit(N,X) :- N1 is N mod 10, N2 is N div 10, prod_digit(N2,X1), X is X1 * N1.

is_del(Del,N):- 0 is N mod Del.

check_del(Del,N):- is_del(Del,N), sum_digit(N,S), nod(Del,S,SumNod), 1 is SumNod,
   prod_digit(N,P), nod(Del,P,ProdNod), not(1 is ProdNod).

sum_del(_,0,Sum,X):-X is Sum, !.
sum_del(N, Count, Sum, X):- Count1 is Count - 1,  ((check_del(Count,N)) -> Sum1 is Sum + Count;Sum1 is Sum), sum_del(N,Count1,Sum1,X).
sum_del_chisla(N,X):-sum_del(N,N,0,X).





